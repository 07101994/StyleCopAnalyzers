namespace StyleCop.Analyzers.Test.DocumentationRules
{
    using System.Threading;
    using System.Threading.Tasks;
    using TestHelper;
    using Xunit;

    /// <summary>
    /// Base class for file header related unit tests.
    /// </summary>
    public abstract class FileHeaderTestBase : DiagnosticVerifier
    {
        /// <summary>
        /// Gets the diagnostics that will be checked in the <see cref="TestNoFileHeaderAsync"/> test case.
        /// </summary>
        /// <value>
        /// The diagnostics that should occur when the test case is executed.
        /// </value>
        protected virtual DiagnosticResult[] NoFileHeaderDiagnostics
        {
            get { return EmptyDiagnosticResults; }
        }

        /// <summary>
        /// Gets the diagnostics that will be checked in the <see cref="TestFileHeaderWithMissingCopyrightTagAsync"/> test case.
        /// </summary>
        /// <value>
        /// The diagnostics that should occur when the test case is executed.
        /// </value>
        protected virtual DiagnosticResult[] MissingCopyrightTagDiagnostics
        {
            get { return EmptyDiagnosticResults; }
        }

        /// <summary>
        /// Verifies that the analyzer will report the correct diagnostics (none for the default case) for a file without a header.
        /// </summary>
        /// <returns>A <see cref="Task"/> representing the asynchronous unit test.</returns>
        [Fact]
        public virtual async Task TestNoFileHeaderAsync()
        {
            var testCode = @"namespace Foo
{
}
";

            await this.VerifyCSharpDiagnosticAsync(testCode, this.NoFileHeaderDiagnostics, CancellationToken.None).ConfigureAwait(false);
        }

        /// <summary>
        /// Verifies that a file header with an autogenerated comment will not produce a diagnostic message.
        /// </summary>
        /// <returns>A <see cref="Task"/> representing the asynchronous unit test.</returns>
        [Fact]
        public async Task TestAutoGeneratedSourceFileAsync()
        {
            var testCode = @"// <auto-generated/>

namespace Bar
{
}
";

            await this.VerifyCSharpDiagnosticAsync(testCode, EmptyDiagnosticResults, CancellationToken.None).ConfigureAwait(false);
        }

        /// <summary>
        /// Verifies that a valid file header will not produce a diagnostic message.
        /// </summary>
        /// <returns>A <see cref="Task"/> representing the asynchronous unit test.</returns>
        [Fact]
        public async Task TestValidFileHeaderAsync()
        {
            var testCode = @"// <copyright file=""Test0.cs"" company=""FooCorp"">
//   Copyright (c) FooCorp. All rights reserved.
// </copyright>
// <summary>This is a test file.</summary>

namespace Bar
{
}
";

            await this.VerifyCSharpDiagnosticAsync(testCode, EmptyDiagnosticResults, CancellationToken.None).ConfigureAwait(false);
        }

        /// <summary>
        /// Verifies that a valid file header with borders will not produce a diagnostic message.
        /// </summary>
        /// <returns>A <see cref="Task"/> representing the asynchronous unit test.</returns>
        [Fact]
        public async Task TestValidFileHeaderWithBordersAsync()
        {
            var testCode = @"//----------------------------------------
// <copyright file=""Test0.cs"" company=""FooCorp"">
//   Copyright (c) FooCorp. All rights reserved.
// </copyright>
// <summary>This is a test file.</summary>
//----------------------------------------

namespace Bar
{
}
";

            await this.VerifyCSharpDiagnosticAsync(testCode, EmptyDiagnosticResults, CancellationToken.None).ConfigureAwait(false);
        }

        /// <summary>
        /// Verifies that a file header without a copyright element will produce the expected diagnostic (none for the default case)
        /// </summary>
        /// <returns>A <see cref="Task"/> representing the asynchronous unit test.</returns>
        [Fact]
        public async Task TestFileHeaderWithMissingCopyrightTagAsync()
        {
            var testCode = @"// <author>
//   John Doe
// </author>
// <summary>This is a test file.</summary>

namespace Bar
{
}
";

            await this.VerifyCSharpDiagnosticAsync(testCode, this.MissingCopyrightTagDiagnostics, CancellationToken.None).ConfigureAwait(false);
        }
    }
}
